#!/bin/sh

# POST-COMMIT HOOK
#
# The post-commit hook is invoked after a commit.  Subversion runs
# this hook by invoking a program (script, executable, binary, etc.)
# named 'post-commit' (for which this file is a template) with the 
# following ordered arguments:
#
#   [1] REPOS-PATH   (the path to this repository)
#   [2] REV          (the number of the revision just committed)
#
# The default working directory for the invocation is undefined, so
# the program should set one explicitly if it cares.
#
# Because the commit has already completed and cannot be undone,
# the exit code of the hook program is ignored.  The hook program
# can use the 'svnlook' utility to help it examine the
# newly-committed tree.
#
# On a Unix system, the normal procedure is to have 'post-commit'
# invoke other programs to do the real work, though it may do the
# work itself too.
#
# Note that 'post-commit' must be executable by the user(s) who will
# invoke it (typically the user httpd runs as), and that user must
# have filesystem-level permission to access the repository.
#
# On a Windows system, you should name the hook program
# 'post-commit.bat' or 'post-commit.exe',
# but the basic idea is the same.
# 
# The hook program typically does not inherit the environment of
# its parent process.  For example, a common problem is for the
# PATH environment variable to not be set to its usual value, so
# that subprograms fail to launch unless invoked via absolute path.
# If you're having unexpected problems with a hook program, the
# culprit may be unusual (or missing) environment variables.
# 
# Here is an example hook script, for a Unix /bin/sh interpreter.
# For more examples and pre-written hooks, see those in
# the Subversion repository at
# http://svn.apache.org/repos/asf/subversion/trunk/tools/hook-scripts/ and
# http://svn.apache.org/repos/asf/subversion/trunk/contrib/hook-scripts/


REPOS="$1"
REV="$2"

# get what has changed with the latest revision 
CHANGES=$(/usr/bin/svnlook changed $1 -r $2)
echo "Script ran on $(date)" >> $1/hooks/svn_commit.log 

echo "revision : r$2" >  $1/hooks/bugzilla.log 2>&1
echo "revision : r$2" >> $1/hooks/bugzilla_backup.log 2>&1 
/usr/bin/svnlook info -r $2 $1 >> $1/hooks/bugzilla.log 2>&1
/usr/bin/svnlook info -r $2 $1 >> $1/hooks/bugzilla_backup.log 2>&1
/usr/bin/svnlook changed -r $2 $1 >> $1/hooks/bugzilla.log 2>&1
/usr/bin/svnlook changed -r $2 $1 >> $1/hooks/bugzilla_backup.log 2>&1
echo "_________________________________________________________________________________________________" >> $1/hooks/bugzilla_backup.log 2>&1
#
#calling bugzilla and inserting details into the comments section..
#./bugzilla_machine_query.sh $1 $2
${REPOS}/hooks/bugzilla_machine_query.sh "${REPOS}" "${REV}" >> $1/hooks/bugzilla_backup.log 


/usr/bin/svnnotify -r $2 -C -p $1 -t cb-devman@cloudbyte.com -f cbauto@cloudbyte.com -P [esmgmt] --viewcvs-url 'http://10.10.1.102/viewvc/esmgmt?rev=%s&view=rev' --smtp smtp.gmail.com --smtp-user cbauto@cloudbyte.com --smtp-tls --smtp-pass CloudByte123

if [[ $CHANGES =~ 'DatabaseUpgradeChecker.java' ]]
then
/usr/bin/svnnotify -r $2 -C -p $1 -t saurav.dey@cloudbyte.com,senthilkumar.e@cloudbyte.com -f cbauto@cloudbyte.com -P [esmgmt][upgrade] --viewcvs-url 'http://10.10.1.102/viewvc/esmgmt?rev=%s&view=rev' --smtp smtp.gmail.com --smtp-user cbauto@cloudbyte.com --smtp-tls --smtp-pass CloudByte123
fi

DIR_CHANGES=$(/usr/bin/svnlook dirs-changed $1 -r $2)
echo "$DIR_CHANGES" | /usr/bin/egrep -q "api"
if [ $? == 0 ] 
then 
/usr/bin/svnnotify -r $2 -C -p $1 -t cb-devman@cloudbyte.com,mardan.singh@cloudbyte.com -f cbauto@cloudbyte.com -P [esmgmt] --viewcvs-url 'http://10.10.1.102/viewvc/esmgmt?rev=%s&view=rev' --smtp smtp.gmail.com --smtp-user cbauto@cloudbyte.com --smtp-tls --smtp-pass CloudByte123
fi
